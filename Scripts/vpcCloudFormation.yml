
Parameters:
  VPCCidr: 
    Description: CIDR para VPC
    Type: String
    Default: 172.24.16.0/24

  PublicSubnet1Cidr:
    Description: Rango Ip para la subnet 1 publica
    Type: String
    Default: 172.24.16.0/28

  PublicSubnet2Cidr:
    Description: Rango Ip para la subnet 2 publica
    Type: String
    Default: 172.24.16.16/28

  PublicSubnet3Cidr:
    Description: Rango Ip para la subnet 3 publica
    Type: String
    Default: 172.24.16.32/28 
  
  PrivateSubnet1Cidr:
    Description: Rango Ip para la subnet 2 privada
    Type: String
    Default: 172.24.16.48/28

  PrivateSubnet2Cidr:
    Description: Rango Ip para la subnet 2 privada
    Type: String
    Default: 172.24.16.64/28

  PrivateSubnet3Cidr:
    Description: Rango Ip para la subnet 3 privada
    Type: String
    Default: 172.24.16.80/28

  AvailibityZone1:
    Description: Availibituy zone 1
    Type: String
    Default: us-west-2b

  AvailibityZone2:
    Description: Availibituy zone 2
    Type: String
    Default: us-west-2a



Resources:
  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: "rdhrVPC"

# Our VPC will need internet access:     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnet1Cidr
        AvailabilityZone: !Ref AvailibityZone1    # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-1

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnet2Cidr
        AvailabilityZone: !Ref AvailibityZone2    # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-2

  PublicSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PublicSubnet3Cidr
        AvailabilityZone: !Ref AvailibityZone1    # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-3

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnet1Cidr
        AvailabilityZone: !Ref AvailibityZone1    # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-1

  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnet2Cidr
        AvailabilityZone: !Ref AvailibityZone2     # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-2

  PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: !Ref PrivateSubnet3Cidr
        AvailabilityZone: !Ref AvailibityZone2     # Get the first AZ in the list       
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-3

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Public
  PublicRoute:   # Public route table has direct routing to IGW:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway 
    # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

# Here is a private route table:
  PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Private  
  PrivateRoute:            # Private route table can access web via NAT (created below)
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        # Route traffic through the NAT Gateway:
        NatGatewayId: !Ref NATGateway

# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
  PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet3
        RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet3
        RouteTableId: !Ref PrivateRouteTable

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "rds-sg"
      GroupDescription: "Security group para permitir el puerto de la base de datos"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0

  WPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "WP-sg"
      GroupDescription: "Security group para permitir el puerto de wordPress"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

Outputs:
  VPCID:
    Description: La referencia de la VPC creada
    Value: !Ref VPC
  
  PublicSubnets:
    Description: Una lista con las subnets publicas creadas
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2]]
  
  PrivateSubnets:
    Description: Una lista con las subnets publicas creadas
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]
  
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3th Availability Zone
    Value: !Ref PublicSubnet3

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3th Availability Zone
    Value: !Ref PrivateSubnet3

  RDSSecurityGroup:
    Description: Una referencia hacia el security group de la BD
    Value: !Ref RDSSecurityGroup

  WPSecurityGroup:
    Description: Una referencia hacia el security group de WordPress
    Value: !Ref WPSecurityGroup